#include <stdio.h>
#include <string.h>
#include <ctype.h> 

/* MicroC/OS-II definitions */
#include "includes.h"

/* Simple Socket Server definitions */
#include "simple_socket_server.h"                                                                    
#include "alt_error_handler.h"

#include "ipport.h"
#include "tcpport.h"
#include "network_utilities.h"
#include "osport.h"
#include "ip.h"

#include "hack_tcp.h"
#include "adc.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"


/*
 * This SSSLEDCommandQ MicroC/OS-II message queue will be used to communicate 
 * between the simple socket server task and Nios Development Board LED control 
 * tasks.
 *
 * Handle to our MicroC/OS-II Command Queue and variable definitions related to 
 * the Q for sending commands received on the TCP-IP socket from the 
 * SSSSimpleSocketServerTask to the LEDManagementTask.
 */
OS_EVENT  *SSSLEDCommandQ;
#define SSS_LED_COMMAND_Q_SIZE  30  /* Message capacity of SSSLEDCommandQ */
void *SSSLEDCommandQTbl[SSS_LED_COMMAND_Q_SIZE]; /*Storage for SSSLEDCommandQ*/


/*
 * Handle to our MicroC/OS-II LED Event Flag.  Each flag corresponds to one of
 * the LEDs on the Nios Development board, D0 - D7. 
 */
OS_FLAG_GRP *SSSLEDEventFlag;

/*
 * Handle to our MicroC/OS-II LED Lightshow Semaphore. The semaphore is checked 
 * by the LED7SegLightshowTask each time it updates 7 segment LED displays, 
 * U8 and U9.  The LEDManagementTask grabs the semaphore away from the lightshow task to
 * toggle the lightshow off, and gives up the semaphore to turn the lightshow
 * back on.  The LEDManagementTask does this in response to the CMD_LEDS_LIGHTSHOW
 * command sent from the SSSSimpleSocketServerTask when the user sends a toggle 
 * lightshow command over the TCPIP socket.
 */
OS_EVENT *SSSLEDLightshowSem;

/* Definition of Task Stacks for tasks not invoked by TK_NEWTASK 
 * (do not use NicheStack) 
 */

OS_STK    LEDManagementTaskStk[TASK_STACKSIZE];
OS_STK    UserTaskStk[TASK_STACKSIZE];

/*
 * Create our MicroC/OS-II resources. All of the resources beginning with 
 * "SSS" are declared in this file, and created in this function.
 */
void SSSCreateOSDataStructs(void)
{
  INT8U error_code;
  
  /*
  * Create the resource for our MicroC/OS-II Queue for sending commands 
  * received on the TCP/IP socket from the SSSSimpleSocketServerTask()
  * to the LEDManagementTask().
  */
  SSSLEDCommandQ = OSQCreate(&SSSLEDCommandQTbl[0], SSS_LED_COMMAND_Q_SIZE);
  if (!SSSLEDCommandQ)
  {
     alt_uCOSIIErrorHandler(EXPANDED_DIAGNOSIS_CODE, 
     "Failed to create SSSLEDCommandQ.\n");
  }
  
 /* Create our MicroC/OS-II LED Lightshow Semaphore.  The semaphore is checked 
  * by the SSSLEDLightshowTask each time it updates 7 segment LED displays, 
  * U8 and U9.  The LEDTask grabs the semaphore away from the lightshow task to
  * toggle the lightshow off, and gives up the semaphore to turn the lightshow
  * back on.  The LEDTask does this in response to the CMD_LEDS_LIGHTSHOW
  * command sent from the SSSSimpleSocketServerTask when the user sends the 
  * toggle lightshow command over the TCPIP socket.
  */
  SSSLEDLightshowSem = OSSemCreate(1);
  if (!SSSLEDLightshowSem)
  {
     alt_uCOSIIErrorHandler(EXPANDED_DIAGNOSIS_CODE, 
                            "Failed to create SSSLEDLightshowSem.\n");
  }
  
 /*
  * Create our MicroC/OS-II LED Event Flag.  Each flag corresponds to one of
  * the LEDs on the Nios Development board, D0 - D7. 
  */   
  SSSLEDEventFlag = OSFlagCreate(0, &error_code);
  if (!SSSLEDEventFlag)
  {
     alt_uCOSIIErrorHandler(error_code, 0);
  }
}

/* This function creates tasks used in this example which do not use sockets.
 * Tasks which use Interniche sockets must be created with TK_NEWTASK.
 */

void SSSCreateTasks(void){
   INT8U error_code;
   int i;
/*
   error_code = OSTaskCreateExt(UserTask,
                             NULL,
                             (void *)&UserTaskStk[TASK_STACKSIZE-1],
                             USER_TASK_PRIORITY,
                             USER_TASK_PRIORITY,
                             UserTaskStk,
                             TASK_STACKSIZE,
                             NULL,
                             0);
   
   alt_uCOSIIErrorHandler(error_code, 0);
  
   error_code = OSTaskCreateExt(LEDManagementTask,
                              NULL,
                              (void *)&LEDManagementTaskStk[TASK_STACKSIZE-1],
                              LED_MANAGEMENT_TASK_PRIORITY,
                              LED_MANAGEMENT_TASK_PRIORITY,
                              LEDManagementTaskStk,
                              TASK_STACKSIZE,
                              NULL,
                              0);

   alt_uCOSIIErrorHandler(error_code, 0);
*/
}


void sss_reset_connection(SSSConn* conn) {
  memset(conn, 0, sizeof(SSSConn));
  conn->fd = -1;
  conn->state = READY;
  conn->rx_wr_pos = conn->rx_buffer;
  conn->rx_rd_pos = conn->rx_buffer;
  return;
}

void GetNextData(  unsigned char *Data, int Len){
   int i,kol=Len>>2;;
   int *D=(int*)Data;

	for(i=0;i<kol;i++){
	    D[i]=i;
	}
}


void SSSSimpleSocketServerTask(){

	long  SocketIn ;
    struct sockaddr_in SenderAddr;
    int SenderAddrSize = sizeof (SenderAddr);
    unsigned char RecvBuf[128];
    int CommandLen,HeaderLen;

     int k,i,res;
     unsigned int timeStart,timeStop;
     // char buffer[1066];
     #define data_len 1024
     char *bf,*bf1;
     unsigned char *DataBuffer;
     int * bufer;


     bf=(char *)npalloc(BlockSize*1024*10+44);
     bf1=(char *)npalloc(2000);
     bufer=(int*)bf;

  OSTimeDlyHMSM(0,0,2,0); // чтоб диагностика отработала



  SocketIn=t_socket (AF_INET, SOCK_DGRAM, 0 ); // для приема команды UDP пакетом
  SenderAddr.sin_family = AF_INET;
  SenderAddr.sin_port = htons((54036));  // порт для приема команд
  SenderAddr.sin_addr.s_addr = htonl(INADDR_ANY);
  bind(SocketIn,  &SenderAddr, sizeof(SenderAddr));


  i=0;
  InitUDP();
  InitADC();
  for(k=0;k<1000;k++) bf[k]=0x55;
	 SendUDP( (char *)bf  , BlockSize*32, ext_net);

  while(1)  {

	  // CommandLen=t_recvfrom( SocketIn, RecvBuf ,128 , 0, (struct sockaddr_in * )&SenderAddr,  &SenderAddrSize);
	   printf("Start  \n" );
	   // получил команду

	   for(k=0;;k++){
		 //  CommandLen=t_recvfrom( SocketIn, RecvBuf ,128 , 0, (struct sockaddr_in * )&SenderAddr,  &SenderAddrSize);
		   printf("Reseived   %d  bytes\n", CommandLen      );
		  timeStart=OSTimeGet();
	      for(i=0;i<10;i++){
	    	 // printf("Time = %d \n", i     );
	    	  //ADCToMem(bf,1024*BlockSize);
              //SendUDP( (alt_u8 *)bf  , BlockSize*32, ext_net);
	    	  //hack_send(ext_net,(alt_u8 *) bf, BlockSize*32 );
	    	  ADCToUDPM(1000);

	      }
          timeStop=OSTimeGet();
		  printf("Time = %d  Speed=%f    %d\n", ( timeStop-timeStart ), i*32000/( timeStop-timeStart )   ,k   );

   	      OSTimeDlyHMSM(0,0,0,200);
	   }
	  for(k=0;k<1024;k++){


//	     LOCK_NET_RESOURCE(NET_RESID);      // пробуем остановить сервис
//    	 res=tse_mac_raw_send( ext_net,bufer,data_len+sizeof( struct udp_raw) + sizeof( struct ip_raw) + sizeof( struct mac_raw) );
//         UNLOCK_NET_RESOURCE(NET_RESID);
		 SendUDP( (char *)bufer, BlockSize*100, ext_net);

	 }// for(k

	    timeStop=OSTimeGet();
		OSTimeDlyHMSM(0,0,0,200);
		printf("Time  %d \n", ( timeStop-timeStart )      );
//		OSTimeDlyHMSM(0,0,0,100);

  } // while(1)

}

